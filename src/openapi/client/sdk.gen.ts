// This file is auto-generated by @hey-api/openapi-ts

import { client as _heyApiClient } from './client.gen';

import type { ApiAccountingsGetCollectionData, ApiAccountingsGetCollectionResponse, ApiAccountingsIdGetData, ApiAccountingsIdGetResponse, ApiAccountingsIdGetError, ApiAccountingsIdPatchData, ApiAccountingsIdPatchResponse, ApiAccountingsIdPatchError, ApiAccountingBalancePointsGetCollectionData, ApiAccountingBalancePointsGetCollectionResponse, ApiAccountingTransactionsGetCollectionData, ApiAccountingTransactionsGetCollectionResponse, ApiAccountingTransactionsIdGetData, ApiAccountingTransactionsIdGetResponse, ApiAccountingTransactionsIdGetError, ApiGatewaysGetCollectionData, ApiGatewaysGetCollectionResponse, ApiGatewaysNameGetData, ApiGatewaysNameGetResponse, ApiGatewaysNameGetError, ApiGatewayChargesGetCollectionData, ApiGatewayChargesGetCollectionResponse, ApiGatewayChargesIdGetData, ApiGatewayChargesIdGetResponse, ApiGatewayChargesIdGetError, ApiGatewayChargesIdPatchData, ApiGatewayChargesIdPatchResponse, ApiGatewayChargesIdPatchError, ApiGatewayCheckoutsGetCollectionData, ApiGatewayCheckoutsGetCollectionResponse, ApiGatewayCheckoutsGetCollectionError, ApiGatewayCheckoutsPostData, ApiGatewayCheckoutsPostResponse, ApiGatewayCheckoutsPostError, ApiGatewayCheckoutsIdGetData, ApiGatewayCheckoutsIdGetResponse, ApiGatewayCheckoutsIdGetError, ApiGatewayCheckoutsIdPatchData, ApiGatewayCheckoutsIdPatchResponse, ApiGatewayCheckoutsIdPatchError, ApiUsersIdorganizationGetData, ApiUsersIdorganizationGetResponse, ApiUsersIdorganizationGetError, ApiUsersIdorganizationPatchData, ApiUsersIdorganizationPatchResponse, ApiUsersIdorganizationPatchError, ApiUsersIdpersonGetData, ApiUsersIdpersonGetResponse, ApiUsersIdpersonGetError, ApiUsersIdpersonPatchData, ApiUsersIdpersonPatchResponse, ApiUsersIdpersonPatchError, ApiProjectsGetCollectionData, ApiProjectsGetCollectionResponse, ApiProjectsPostData, ApiProjectsPostResponse, ApiProjectsPostError, ApiProjectsIdOrSlugGetData, ApiProjectsIdOrSlugGetResponse, ApiProjectsIdOrSlugGetError, ApiProjectsIdDeleteData, ApiProjectsIdDeleteResponse, ApiProjectsIdDeleteError, ApiProjectsIdPatchData, ApiProjectsIdPatchResponse, ApiProjectsIdPatchError, ApiProjectBudgetItemsGetCollectionData, ApiProjectBudgetItemsGetCollectionResponse, ApiProjectBudgetItemsPostData, ApiProjectBudgetItemsPostResponse, ApiProjectBudgetItemsPostError, ApiProjectBudgetItemsIdDeleteData, ApiProjectBudgetItemsIdDeleteResponse, ApiProjectBudgetItemsIdDeleteError, ApiProjectBudgetItemsIdGetData, ApiProjectBudgetItemsIdGetResponse, ApiProjectBudgetItemsIdGetError, ApiProjectBudgetItemsIdPatchData, ApiProjectBudgetItemsIdPatchResponse, ApiProjectBudgetItemsIdPatchError, ApiProjectRewardsGetCollectionData, ApiProjectRewardsGetCollectionResponse, ApiProjectRewardsPostData, ApiProjectRewardsPostResponse, ApiProjectRewardsPostError, ApiProjectRewardsIdDeleteData, ApiProjectRewardsIdDeleteResponse, ApiProjectRewardsIdDeleteError, ApiProjectRewardsIdGetData, ApiProjectRewardsIdGetResponse, ApiProjectRewardsIdGetError, ApiProjectRewardsIdPatchData, ApiProjectRewardsIdPatchResponse, ApiProjectRewardsIdPatchError, ApiProjectRewardClaimsGetCollectionData, ApiProjectRewardClaimsGetCollectionResponse, ApiProjectRewardClaimsPostData, ApiProjectRewardClaimsPostResponse, ApiProjectRewardClaimsPostError, ApiProjectRewardClaimsIdDeleteData, ApiProjectRewardClaimsIdDeleteResponse, ApiProjectRewardClaimsIdDeleteError, ApiProjectRewardClaimsIdGetData, ApiProjectRewardClaimsIdGetResponse, ApiProjectRewardClaimsIdGetError, ApiProjectRewardClaimsIdPatchData, ApiProjectRewardClaimsIdPatchResponse, ApiProjectRewardClaimsIdPatchError, ApiProjectSupportsGetCollectionData, ApiProjectSupportsGetCollectionResponse, ApiProjectSupportsIdGetData, ApiProjectSupportsIdGetResponse, ApiProjectSupportsIdGetError, ApiProjectSupportsIdPatchData, ApiProjectSupportsIdPatchResponse, ApiProjectSupportsIdPatchError, ApiProjectUpdatesGetCollectionData, ApiProjectUpdatesGetCollectionResponse, ApiProjectUpdatesPostData, ApiProjectUpdatesPostResponse, ApiProjectUpdatesPostError, ApiProjectUpdatesIdDeleteData, ApiProjectUpdatesIdDeleteResponse, ApiProjectUpdatesIdDeleteError, ApiProjectUpdatesIdGetData, ApiProjectUpdatesIdGetResponse, ApiProjectUpdatesIdGetError, ApiProjectUpdatesIdPatchData, ApiProjectUpdatesIdPatchResponse, ApiProjectUpdatesIdPatchError, ApiTipjarsGetCollectionData, ApiTipjarsGetCollectionResponse, ApiTipjarsPostData, ApiTipjarsPostResponse, ApiTipjarsPostError, ApiTipjarsIdDeleteData, ApiTipjarsIdDeleteResponse, ApiTipjarsIdDeleteError, ApiTipjarsIdGetData, ApiTipjarsIdGetResponse, ApiTipjarsIdGetError, ApiTipjarsIdPatchData, ApiTipjarsIdPatchResponse, ApiTipjarsIdPatchError, ApiUsersGetCollectionData, ApiUsersGetCollectionResponse, ApiUsersPostData, ApiUsersPostResponse, ApiUsersPostError, ApiUsersIdDeleteData, ApiUsersIdDeleteResponse, ApiUsersIdDeleteError, ApiUsersIdGetData, ApiUsersIdGetResponse, ApiUsersIdGetError, ApiUsersIdPatchData, ApiUsersIdPatchResponse, ApiUsersIdPatchError, ApiUserTokensPostData, ApiUserTokensPostResponse, ApiUserTokensPostError, ApiUserTokensIdDeleteData, ApiUserTokensIdDeleteResponse, ApiUserTokensIdDeleteError, ApiUserTokensIdGetData, ApiUserTokensIdGetResponse, ApiUserTokensIdGetError, ApiVersionsGetCollectionData, ApiVersionsGetCollectionResponse, ApiVersionsIdGetData, ApiVersionsIdGetResponse, ApiVersionsIdGetError } from './types.gen';
import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Retrieves the collection of Accounting resources.
 * Retrieves the collection of Accounting resources.
 */
export const apiAccountingsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiAccountingsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAccountingsGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accountings',
        ...options
    });
};

/**
 * Retrieves a Accounting resource.
 * Retrieves one Accounting resource.
 */
export const apiAccountingsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiAccountingsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiAccountingsIdGetResponse, ApiAccountingsIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accountings/{id}',
        ...options
    });
};

/**
 * Updates the Accounting resource.
 * Updates the Accounting resource.
 */
export const apiAccountingsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiAccountingsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiAccountingsIdPatchResponse, ApiAccountingsIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accountings/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of AccountingBalancePoint resources.
 * Retrieves the collection of AccountingBalancePoint resources.
 */
export const apiAccountingBalancePointsGetCollection = <ThrowOnError extends boolean = false>(options: Options<ApiAccountingBalancePointsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiAccountingBalancePointsGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accounting_balance_points',
        ...options
    });
};

/**
 * Retrieves the collection of AccountingTransaction resources.
 * Retrieves the collection of AccountingTransaction resources.
 */
export const apiAccountingTransactionsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiAccountingTransactionsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAccountingTransactionsGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accounting_transactions',
        ...options
    });
};

/**
 * Retrieves a AccountingTransaction resource.
 * Retrieves one AccountingTransaction resource.
 */
export const apiAccountingTransactionsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiAccountingTransactionsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiAccountingTransactionsIdGetResponse, ApiAccountingTransactionsIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accounting_transactions/{id}',
        ...options
    });
};

/**
 * Retrieves the collection of Gateway resources.
 * Retrieves the collection of Gateway resources.
 */
export const apiGatewaysGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiGatewaysGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiGatewaysGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateways',
        ...options
    });
};

/**
 * Retrieves a Gateway resource.
 * Retrieves one Gateway resource.
 */
export const apiGatewaysNameGet = <ThrowOnError extends boolean = false>(options: Options<ApiGatewaysNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiGatewaysNameGetResponse, ApiGatewaysNameGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateways/{name}',
        ...options
    });
};

/**
 * Retrieves the collection of GatewayCharge resources.
 * Retrieves the collection of GatewayCharge resources.
 */
export const apiGatewayChargesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiGatewayChargesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiGatewayChargesGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_charges',
        ...options
    });
};

/**
 * Retrieves a GatewayCharge resource.
 * Retrieves one GatewayCharge resource.
 */
export const apiGatewayChargesIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiGatewayChargesIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiGatewayChargesIdGetResponse, ApiGatewayChargesIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_charges/{id}',
        ...options
    });
};

/**
 * Updates the GatewayCharge resource.
 * Updates the GatewayCharge resource.
 */
export const apiGatewayChargesIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiGatewayChargesIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiGatewayChargesIdPatchResponse, ApiGatewayChargesIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_charges/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of GatewayCheckout resources.
 * Retrieves the collection of GatewayCheckout resources.
 */
export const apiGatewayCheckoutsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiGatewayCheckoutsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiGatewayCheckoutsGetCollectionResponse, ApiGatewayCheckoutsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_checkouts',
        ...options
    });
};

/**
 * Creates a GatewayCheckout resource.
 * Creates a GatewayCheckout resource.
 */
export const apiGatewayCheckoutsPost = <ThrowOnError extends boolean = false>(options: Options<ApiGatewayCheckoutsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiGatewayCheckoutsPostResponse, ApiGatewayCheckoutsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_checkouts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a GatewayCheckout resource.
 * Retrieves one GatewayCheckout resource.
 */
export const apiGatewayCheckoutsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiGatewayCheckoutsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiGatewayCheckoutsIdGetResponse, ApiGatewayCheckoutsIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_checkouts/{id}',
        ...options
    });
};

/**
 * Updates the GatewayCheckout resource.
 * Updates the GatewayCheckout resource.
 */
export const apiGatewayCheckoutsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiGatewayCheckoutsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiGatewayCheckoutsIdPatchResponse, ApiGatewayCheckoutsIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_checkouts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Organization resource.
 * Retrieves one Organization resource.
 */
export const apiUsersIdorganizationGet = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdorganizationGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiUsersIdorganizationGetResponse, ApiUsersIdorganizationGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}/organization',
        ...options
    });
};

/**
 * Updates the Organization resource.
 * Updates the Organization resource.
 */
export const apiUsersIdorganizationPatch = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdorganizationPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiUsersIdorganizationPatchResponse, ApiUsersIdorganizationPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}/organization',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Person resource.
 * Retrieves one Person resource.
 */
export const apiUsersIdpersonGet = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdpersonGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiUsersIdpersonGetResponse, ApiUsersIdpersonGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}/person',
        ...options
    });
};

/**
 * Updates the Person resource.
 * Updates the Person resource.
 */
export const apiUsersIdpersonPatch = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdpersonPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiUsersIdpersonPatchResponse, ApiUsersIdpersonPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}/person',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Project resources.
 * Retrieves the collection of Project resources.
 */
export const apiProjectsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectsGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/projects',
        ...options
    });
};

/**
 * Creates a Project resource.
 * Creates a Project resource.
 */
export const apiProjectsPost = <ThrowOnError extends boolean = false>(options: Options<ApiProjectsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiProjectsPostResponse, ApiProjectsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Project resource.
 * Retrieves one Project resource.
 */
export const apiProjectsIdOrSlugGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectsIdOrSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectsIdOrSlugGetResponse, ApiProjectsIdOrSlugGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/projects/{idOrSlug}',
        ...options
    });
};

/**
 * Removes the Project resource.
 * Removes the Project resource.
 */
export const apiProjectsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiProjectsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiProjectsIdDeleteResponse, ApiProjectsIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/projects/{id}',
        ...options
    });
};

/**
 * Updates the Project resource.
 * Updates the Project resource.
 */
export const apiProjectsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectsIdPatchResponse, ApiProjectsIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/projects/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of ProjectBudgetItem resources.
 * Retrieves the collection of ProjectBudgetItem resources.
 */
export const apiProjectBudgetItemsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectBudgetItemsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectBudgetItemsGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_budget_items',
        ...options
    });
};

/**
 * Creates a ProjectBudgetItem resource.
 * Creates a ProjectBudgetItem resource.
 */
export const apiProjectBudgetItemsPost = <ThrowOnError extends boolean = false>(options: Options<ApiProjectBudgetItemsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiProjectBudgetItemsPostResponse, ApiProjectBudgetItemsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_budget_items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes the ProjectBudgetItem resource.
 * Removes the ProjectBudgetItem resource.
 */
export const apiProjectBudgetItemsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiProjectBudgetItemsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiProjectBudgetItemsIdDeleteResponse, ApiProjectBudgetItemsIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_budget_items/{id}',
        ...options
    });
};

/**
 * Retrieves a ProjectBudgetItem resource.
 * Retrieves one ProjectBudgetItem resource.
 */
export const apiProjectBudgetItemsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectBudgetItemsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectBudgetItemsIdGetResponse, ApiProjectBudgetItemsIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_budget_items/{id}',
        ...options
    });
};

/**
 * Updates the ProjectBudgetItem resource.
 * Updates the ProjectBudgetItem resource.
 */
export const apiProjectBudgetItemsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectBudgetItemsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectBudgetItemsIdPatchResponse, ApiProjectBudgetItemsIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_budget_items/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of ProjectReward resources.
 * Retrieves the collection of ProjectReward resources.
 */
export const apiProjectRewardsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectRewardsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectRewardsGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_rewards',
        ...options
    });
};

/**
 * Creates a ProjectReward resource.
 * Creates a ProjectReward resource.
 */
export const apiProjectRewardsPost = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiProjectRewardsPostResponse, ApiProjectRewardsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_rewards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes the ProjectReward resource.
 * Removes the ProjectReward resource.
 */
export const apiProjectRewardsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiProjectRewardsIdDeleteResponse, ApiProjectRewardsIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_rewards/{id}',
        ...options
    });
};

/**
 * Retrieves a ProjectReward resource.
 * Retrieves one ProjectReward resource.
 */
export const apiProjectRewardsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectRewardsIdGetResponse, ApiProjectRewardsIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_rewards/{id}',
        ...options
    });
};

/**
 * Updates the ProjectReward resource.
 * Updates the ProjectReward resource.
 */
export const apiProjectRewardsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectRewardsIdPatchResponse, ApiProjectRewardsIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_rewards/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of ProjectRewardClaim resources.
 * Retrieves the collection of ProjectRewardClaim resources.
 */
export const apiProjectRewardClaimsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectRewardClaimsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectRewardClaimsGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_reward_claims',
        ...options
    });
};

/**
 * Creates a ProjectRewardClaim resource.
 * Creates a ProjectRewardClaim resource.
 */
export const apiProjectRewardClaimsPost = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardClaimsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiProjectRewardClaimsPostResponse, ApiProjectRewardClaimsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_reward_claims',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes the ProjectRewardClaim resource.
 * Removes the ProjectRewardClaim resource.
 */
export const apiProjectRewardClaimsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardClaimsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiProjectRewardClaimsIdDeleteResponse, ApiProjectRewardClaimsIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_reward_claims/{id}',
        ...options
    });
};

/**
 * Retrieves a ProjectRewardClaim resource.
 * Retrieves one ProjectRewardClaim resource.
 */
export const apiProjectRewardClaimsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardClaimsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectRewardClaimsIdGetResponse, ApiProjectRewardClaimsIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_reward_claims/{id}',
        ...options
    });
};

/**
 * Updates the ProjectRewardClaim resource.
 * Updates the ProjectRewardClaim resource.
 */
export const apiProjectRewardClaimsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardClaimsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectRewardClaimsIdPatchResponse, ApiProjectRewardClaimsIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_reward_claims/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of ProjectSupport resources.
 * Retrieves the collection of ProjectSupport resources.
 */
export const apiProjectSupportsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectSupportsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectSupportsGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_supports',
        ...options
    });
};

/**
 * Retrieves a ProjectSupport resource.
 * Retrieves one ProjectSupport resource.
 */
export const apiProjectSupportsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectSupportsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectSupportsIdGetResponse, ApiProjectSupportsIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_supports/{id}',
        ...options
    });
};

/**
 * Updates the ProjectSupport resource.
 * Updates the ProjectSupport resource.
 */
export const apiProjectSupportsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectSupportsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectSupportsIdPatchResponse, ApiProjectSupportsIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_supports/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of ProjectUpdate resources.
 * Retrieves the collection of ProjectUpdate resources.
 */
export const apiProjectUpdatesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectUpdatesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectUpdatesGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_updates',
        ...options
    });
};

/**
 * Creates a ProjectUpdate resource.
 * Creates a ProjectUpdate resource.
 */
export const apiProjectUpdatesPost = <ThrowOnError extends boolean = false>(options: Options<ApiProjectUpdatesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiProjectUpdatesPostResponse, ApiProjectUpdatesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_updates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes the ProjectUpdate resource.
 * Removes the ProjectUpdate resource.
 */
export const apiProjectUpdatesIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiProjectUpdatesIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiProjectUpdatesIdDeleteResponse, ApiProjectUpdatesIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_updates/{id}',
        ...options
    });
};

/**
 * Retrieves a ProjectUpdate resource.
 * Retrieves one ProjectUpdate resource.
 */
export const apiProjectUpdatesIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectUpdatesIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectUpdatesIdGetResponse, ApiProjectUpdatesIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_updates/{id}',
        ...options
    });
};

/**
 * Updates the ProjectUpdate resource.
 * Updates the ProjectUpdate resource.
 */
export const apiProjectUpdatesIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectUpdatesIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectUpdatesIdPatchResponse, ApiProjectUpdatesIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_updates/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Tipjar resources.
 * Retrieves the collection of Tipjar resources.
 */
export const apiTipjarsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiTipjarsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiTipjarsGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/tipjars',
        ...options
    });
};

/**
 * Creates a Tipjar resource.
 * Creates a Tipjar resource.
 */
export const apiTipjarsPost = <ThrowOnError extends boolean = false>(options: Options<ApiTipjarsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiTipjarsPostResponse, ApiTipjarsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/tipjars',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes the Tipjar resource.
 * Removes the Tipjar resource.
 */
export const apiTipjarsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiTipjarsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiTipjarsIdDeleteResponse, ApiTipjarsIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/tipjars/{id}',
        ...options
    });
};

/**
 * Retrieves a Tipjar resource.
 * Retrieves one Tipjar resource.
 */
export const apiTipjarsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiTipjarsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiTipjarsIdGetResponse, ApiTipjarsIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/tipjars/{id}',
        ...options
    });
};

/**
 * Updates the Tipjar resource.
 * Updates the Tipjar resource.
 */
export const apiTipjarsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiTipjarsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiTipjarsIdPatchResponse, ApiTipjarsIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/tipjars/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of User resources.
 * Retrieves the collection of User resources.
 */
export const apiUsersGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiUsersGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiUsersGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users',
        ...options
    });
};

/**
 * Creates a User resource.
 * Creates a User resource.
 */
export const apiUsersPost = <ThrowOnError extends boolean = false>(options: Options<ApiUsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiUsersPostResponse, ApiUsersPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes the User resource.
 * Removes the User resource.
 */
export const apiUsersIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiUsersIdDeleteResponse, ApiUsersIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}',
        ...options
    });
};

/**
 * Retrieves a User resource.
 * Retrieves one User resource.
 */
export const apiUsersIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiUsersIdGetResponse, ApiUsersIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}',
        ...options
    });
};

/**
 * Updates the User resource.
 * Updates the User resource.
 */
export const apiUsersIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiUsersIdPatchResponse, ApiUsersIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Creates a UserToken resource.
 * Creates a new UserToken resource.
 */
export const apiUserTokensPost = <ThrowOnError extends boolean = false>(options: Options<ApiUserTokensPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiUserTokensPostResponse, ApiUserTokensPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/user_tokens',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes the UserToken resource.
 * Removes the UserToken resource.
 */
export const apiUserTokensIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiUserTokensIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiUserTokensIdDeleteResponse, ApiUserTokensIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/user_tokens/{id}',
        ...options
    });
};

/**
 * Retrieves a UserToken resource.
 * Retrieves one UserToken resource.
 */
export const apiUserTokensIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiUserTokensIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiUserTokensIdGetResponse, ApiUserTokensIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/user_tokens/{id}',
        ...options
    });
};

/**
 * Retrieves the collection of Version resources.
 * Retrieves the collection of Version resources.
 */
export const apiVersionsGetCollection = <ThrowOnError extends boolean = false>(options: Options<ApiVersionsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiVersionsGetCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/versions',
        ...options
    });
};

/**
 * Retrieves a Version resource.
 * Retrieves one Version resource.
 */
export const apiVersionsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiVersionsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiVersionsIdGetResponse, ApiVersionsIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/versions/{id}',
        ...options
    });
};