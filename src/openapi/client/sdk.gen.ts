// This file is auto-generated by @hey-api/openapi-ts

import { client as _heyApiClient } from './client.gen';

import type { ApiAccountingsGetCollectionData, ApiAccountingsGetCollectionResponses, ApiAccountingsIdGetData, ApiAccountingsIdGetResponses, ApiAccountingsIdGetErrors, ApiAccountingsIdPatchData, ApiAccountingsIdPatchResponses, ApiAccountingsIdPatchErrors, ApiAccountingBalancePointsGetCollectionData, ApiAccountingBalancePointsGetCollectionResponses, ApiAccountingTransactionsGetCollectionData, ApiAccountingTransactionsGetCollectionResponses, ApiAccountingTransactionsIdGetData, ApiAccountingTransactionsIdGetResponses, ApiAccountingTransactionsIdGetErrors, ApiGatewaysGetCollectionData, ApiGatewaysGetCollectionResponses, ApiGatewaysNameGetData, ApiGatewaysNameGetResponses, ApiGatewaysNameGetErrors, ApiGatewayChargesGetCollectionData, ApiGatewayChargesGetCollectionResponses, ApiGatewayChargesIdGetData, ApiGatewayChargesIdGetResponses, ApiGatewayChargesIdGetErrors, ApiGatewayChargesIdPatchData, ApiGatewayChargesIdPatchResponses, ApiGatewayChargesIdPatchErrors, ApiGatewayCheckoutsGetCollectionData, ApiGatewayCheckoutsGetCollectionResponses, ApiGatewayCheckoutsGetCollectionErrors, ApiGatewayCheckoutsPostData, ApiGatewayCheckoutsPostResponses, ApiGatewayCheckoutsPostErrors, ApiGatewayCheckoutsIdGetData, ApiGatewayCheckoutsIdGetResponses, ApiGatewayCheckoutsIdGetErrors, ApiGatewayCheckoutsIdPatchData, ApiGatewayCheckoutsIdPatchResponses, ApiGatewayCheckoutsIdPatchErrors, ApiMatchCallsGetCollectionData, ApiMatchCallsGetCollectionResponses, ApiMatchCallsPostData, ApiMatchCallsPostResponses, ApiMatchCallsPostErrors, ApiMatchCallsIdDeleteData, ApiMatchCallsIdDeleteResponses, ApiMatchCallsIdDeleteErrors, ApiMatchCallsIdGetData, ApiMatchCallsIdGetResponses, ApiMatchCallsIdGetErrors, ApiMatchCallsIdPatchData, ApiMatchCallsIdPatchResponses, ApiMatchCallsIdPatchErrors, ApiMatchCallSubmissionsGetCollectionData, ApiMatchCallSubmissionsGetCollectionResponses, ApiMatchCallSubmissionsPostData, ApiMatchCallSubmissionsPostResponses, ApiMatchCallSubmissionsPostErrors, ApiMatchCallSubmissionsIdGetData, ApiMatchCallSubmissionsIdGetResponses, ApiMatchCallSubmissionsIdGetErrors, ApiMatchCallSubmissionsIdPatchData, ApiMatchCallSubmissionsIdPatchResponses, ApiMatchCallSubmissionsIdPatchErrors, ApiMatchFormulasGetCollectionData, ApiMatchFormulasGetCollectionResponses, ApiMatchFormulasNameGetData, ApiMatchFormulasNameGetResponses, ApiMatchFormulasNameGetErrors, ApiMatchRulesGetCollectionData, ApiMatchRulesGetCollectionResponses, ApiMatchRulesNameGetData, ApiMatchRulesNameGetResponses, ApiMatchRulesNameGetErrors, ApiMatchStrategiesGetCollectionData, ApiMatchStrategiesGetCollectionResponses, ApiMatchStrategiesPostData, ApiMatchStrategiesPostResponses, ApiMatchStrategiesPostErrors, ApiMatchStrategiesIdDeleteData, ApiMatchStrategiesIdDeleteResponses, ApiMatchStrategiesIdDeleteErrors, ApiMatchStrategiesIdGetData, ApiMatchStrategiesIdGetResponses, ApiMatchStrategiesIdGetErrors, ApiMatchStrategiesIdPatchData, ApiMatchStrategiesIdPatchResponses, ApiMatchStrategiesIdPatchErrors, ApiUsersIdorganizationGetData, ApiUsersIdorganizationGetResponses, ApiUsersIdorganizationGetErrors, ApiUsersIdorganizationPatchData, ApiUsersIdorganizationPatchResponses, ApiUsersIdorganizationPatchErrors, ApiUsersIdpersonGetData, ApiUsersIdpersonGetResponses, ApiUsersIdpersonGetErrors, ApiUsersIdpersonPatchData, ApiUsersIdpersonPatchResponses, ApiUsersIdpersonPatchErrors, ApiProjectsGetCollectionData, ApiProjectsGetCollectionResponses, ApiProjectsPostData, ApiProjectsPostResponses, ApiProjectsPostErrors, ApiProjectsIdOrSlugGetData, ApiProjectsIdOrSlugGetResponses, ApiProjectsIdOrSlugGetErrors, ApiProjectsIdDeleteData, ApiProjectsIdDeleteResponses, ApiProjectsIdDeleteErrors, ApiProjectsIdPatchData, ApiProjectsIdPatchResponses, ApiProjectsIdPatchErrors, ApiProjectBudgetItemsGetCollectionData, ApiProjectBudgetItemsGetCollectionResponses, ApiProjectBudgetItemsPostData, ApiProjectBudgetItemsPostResponses, ApiProjectBudgetItemsPostErrors, ApiProjectBudgetItemsIdDeleteData, ApiProjectBudgetItemsIdDeleteResponses, ApiProjectBudgetItemsIdDeleteErrors, ApiProjectBudgetItemsIdGetData, ApiProjectBudgetItemsIdGetResponses, ApiProjectBudgetItemsIdGetErrors, ApiProjectBudgetItemsIdPatchData, ApiProjectBudgetItemsIdPatchResponses, ApiProjectBudgetItemsIdPatchErrors, ApiProjectRewardsGetCollectionData, ApiProjectRewardsGetCollectionResponses, ApiProjectRewardsPostData, ApiProjectRewardsPostResponses, ApiProjectRewardsPostErrors, ApiProjectRewardsIdDeleteData, ApiProjectRewardsIdDeleteResponses, ApiProjectRewardsIdDeleteErrors, ApiProjectRewardsIdGetData, ApiProjectRewardsIdGetResponses, ApiProjectRewardsIdGetErrors, ApiProjectRewardsIdPatchData, ApiProjectRewardsIdPatchResponses, ApiProjectRewardsIdPatchErrors, ApiProjectRewardClaimsGetCollectionData, ApiProjectRewardClaimsGetCollectionResponses, ApiProjectRewardClaimsPostData, ApiProjectRewardClaimsPostResponses, ApiProjectRewardClaimsPostErrors, ApiProjectRewardClaimsIdDeleteData, ApiProjectRewardClaimsIdDeleteResponses, ApiProjectRewardClaimsIdDeleteErrors, ApiProjectRewardClaimsIdGetData, ApiProjectRewardClaimsIdGetResponses, ApiProjectRewardClaimsIdGetErrors, ApiProjectSupportsGetCollectionData, ApiProjectSupportsGetCollectionResponses, ApiProjectSupportsmoneyTotalGetCollectionData, ApiProjectSupportsmoneyTotalGetCollectionResponses, ApiProjectSupportsIdGetData, ApiProjectSupportsIdGetResponses, ApiProjectSupportsIdGetErrors, ApiProjectSupportsIdPatchData, ApiProjectSupportsIdPatchResponses, ApiProjectSupportsIdPatchErrors, ApiProjectUpdatesGetCollectionData, ApiProjectUpdatesGetCollectionResponses, ApiProjectUpdatesPostData, ApiProjectUpdatesPostResponses, ApiProjectUpdatesPostErrors, ApiProjectUpdatesIdDeleteData, ApiProjectUpdatesIdDeleteResponses, ApiProjectUpdatesIdDeleteErrors, ApiProjectUpdatesIdGetData, ApiProjectUpdatesIdGetResponses, ApiProjectUpdatesIdGetErrors, ApiProjectUpdatesIdPatchData, ApiProjectUpdatesIdPatchResponses, ApiProjectUpdatesIdPatchErrors, ApiTipjarsGetCollectionData, ApiTipjarsGetCollectionResponses, ApiTipjarsPostData, ApiTipjarsPostResponses, ApiTipjarsPostErrors, ApiTipjarsIdDeleteData, ApiTipjarsIdDeleteResponses, ApiTipjarsIdDeleteErrors, ApiTipjarsIdGetData, ApiTipjarsIdGetResponses, ApiTipjarsIdGetErrors, ApiTipjarsIdPatchData, ApiTipjarsIdPatchResponses, ApiTipjarsIdPatchErrors, ApiUsersGetCollectionData, ApiUsersGetCollectionResponses, ApiUsersPostData, ApiUsersPostResponses, ApiUsersPostErrors, ApiUsersIdDeleteData, ApiUsersIdDeleteResponses, ApiUsersIdDeleteErrors, ApiUsersIdGetData, ApiUsersIdGetResponses, ApiUsersIdGetErrors, ApiUsersIdPatchData, ApiUsersIdPatchResponses, ApiUsersIdPatchErrors, ApiUserTokensPostData, ApiUserTokensPostResponses, ApiUserTokensPostErrors, ApiUserTokensIdDeleteData, ApiUserTokensIdDeleteResponses, ApiUserTokensIdDeleteErrors, ApiUserTokensIdGetData, ApiUserTokensIdGetResponses, ApiUserTokensIdGetErrors, ApiVersionsGetCollectionData, ApiVersionsGetCollectionResponses, ApiVersionsIdGetData, ApiVersionsIdGetResponses, ApiVersionsIdGetErrors } from './types.gen';
import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Retrieves the collection of Accounting resources.
 * Retrieves the collection of Accounting resources.
 */
export const apiAccountingsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiAccountingsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAccountingsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accountings',
        ...options
    });
};

/**
 * Retrieves a Accounting resource.
 * Retrieves one Accounting resource.
 */
export const apiAccountingsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiAccountingsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiAccountingsIdGetResponses, ApiAccountingsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accountings/{id}',
        ...options
    });
};

/**
 * Updates the Accounting resource.
 * Updates the Accounting resource.
 */
export const apiAccountingsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiAccountingsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiAccountingsIdPatchResponses, ApiAccountingsIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accountings/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of AccountingBalancePoint resources.
 * Retrieves the collection of AccountingBalancePoint resources.
 */
export const apiAccountingBalancePointsGetCollection = <ThrowOnError extends boolean = false>(options: Options<ApiAccountingBalancePointsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiAccountingBalancePointsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accounting_balance_points',
        ...options
    });
};

/**
 * Retrieves the collection of AccountingTransaction resources.
 * Retrieves the collection of AccountingTransaction resources.
 */
export const apiAccountingTransactionsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiAccountingTransactionsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAccountingTransactionsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accounting_transactions',
        ...options
    });
};

/**
 * Retrieves a AccountingTransaction resource.
 * Retrieves one AccountingTransaction resource.
 */
export const apiAccountingTransactionsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiAccountingTransactionsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiAccountingTransactionsIdGetResponses, ApiAccountingTransactionsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/accounting_transactions/{id}',
        ...options
    });
};

/**
 * Retrieves the collection of Gateway resources.
 * Retrieves the collection of Gateway resources.
 */
export const apiGatewaysGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiGatewaysGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiGatewaysGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateways',
        ...options
    });
};

/**
 * Retrieves a Gateway resource.
 * Retrieves one Gateway resource.
 */
export const apiGatewaysNameGet = <ThrowOnError extends boolean = false>(options: Options<ApiGatewaysNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiGatewaysNameGetResponses, ApiGatewaysNameGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateways/{name}',
        ...options
    });
};

/**
 * Retrieves the collection of GatewayCharge resources.
 * Retrieves the collection of GatewayCharge resources.
 */
export const apiGatewayChargesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiGatewayChargesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiGatewayChargesGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v4/gateway_charges',
        ...options
    });
};

/**
 * Retrieves a GatewayCharge resource.
 * Retrieves one GatewayCharge resource.
 */
export const apiGatewayChargesIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiGatewayChargesIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiGatewayChargesIdGetResponses, ApiGatewayChargesIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_charges/{id}',
        ...options
    });
};

/**
 * Updates the GatewayCharge resource.
 * Updates the GatewayCharge resource.
 */
export const apiGatewayChargesIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiGatewayChargesIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiGatewayChargesIdPatchResponses, ApiGatewayChargesIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_charges/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of GatewayCheckout resources.
 * Retrieves the collection of GatewayCheckout resources.
 */
export const apiGatewayCheckoutsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiGatewayCheckoutsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiGatewayCheckoutsGetCollectionResponses, ApiGatewayCheckoutsGetCollectionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_checkouts',
        ...options
    });
};

/**
 * Creates a GatewayCheckout resource.
 * Creates a GatewayCheckout resource.
 */
export const apiGatewayCheckoutsPost = <ThrowOnError extends boolean = false>(options: Options<ApiGatewayCheckoutsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiGatewayCheckoutsPostResponses, ApiGatewayCheckoutsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_checkouts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves a GatewayCheckout resource.
 * Retrieves one GatewayCheckout resource.
 */
export const apiGatewayCheckoutsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiGatewayCheckoutsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiGatewayCheckoutsIdGetResponses, ApiGatewayCheckoutsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_checkouts/{id}',
        ...options
    });
};

/**
 * Updates the GatewayCheckout resource.
 * Updates the GatewayCheckout resource.
 */
export const apiGatewayCheckoutsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiGatewayCheckoutsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiGatewayCheckoutsIdPatchResponses, ApiGatewayCheckoutsIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/gateway_checkouts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of MatchCall resources.
 * Retrieves the collection of MatchCall resources.
 */
export const apiMatchCallsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiMatchCallsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiMatchCallsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_calls',
        ...options
    });
};

/**
 * Creates a MatchCall resource.
 * Creates a MatchCall resource.
 */
export const apiMatchCallsPost = <ThrowOnError extends boolean = false>(options: Options<ApiMatchCallsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiMatchCallsPostResponses, ApiMatchCallsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_calls',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes the MatchCall resource.
 * Removes the MatchCall resource.
 */
export const apiMatchCallsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiMatchCallsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiMatchCallsIdDeleteResponses, ApiMatchCallsIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_calls/{id}',
        ...options
    });
};

/**
 * Retrieves a MatchCall resource.
 * Retrieves one MatchCall resource.
 */
export const apiMatchCallsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiMatchCallsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiMatchCallsIdGetResponses, ApiMatchCallsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_calls/{id}',
        ...options
    });
};

/**
 * Updates the MatchCall resource.
 * Updates the MatchCall resource.
 */
export const apiMatchCallsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiMatchCallsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiMatchCallsIdPatchResponses, ApiMatchCallsIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_calls/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of MatchCallSubmission resources.
 * Retrieves the collection of MatchCallSubmission resources.
 */
export const apiMatchCallSubmissionsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiMatchCallSubmissionsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiMatchCallSubmissionsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_call_submissions',
        ...options
    });
};

/**
 * Creates a MatchCallSubmission resource.
 * Creates a MatchCallSubmission resource.
 */
export const apiMatchCallSubmissionsPost = <ThrowOnError extends boolean = false>(options: Options<ApiMatchCallSubmissionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiMatchCallSubmissionsPostResponses, ApiMatchCallSubmissionsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_call_submissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves a MatchCallSubmission resource.
 * Retrieves one MatchCallSubmission resource.
 */
export const apiMatchCallSubmissionsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiMatchCallSubmissionsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiMatchCallSubmissionsIdGetResponses, ApiMatchCallSubmissionsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_call_submissions/{id}',
        ...options
    });
};

/**
 * Updates the MatchCallSubmission resource.
 * Updates the MatchCallSubmission resource.
 */
export const apiMatchCallSubmissionsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiMatchCallSubmissionsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiMatchCallSubmissionsIdPatchResponses, ApiMatchCallSubmissionsIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_call_submissions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of MatchFormula resources.
 * Retrieves the collection of MatchFormula resources.
 */
export const apiMatchFormulasGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiMatchFormulasGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiMatchFormulasGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_formulas',
        ...options
    });
};

/**
 * Retrieves a MatchFormula resource.
 * Retrieves one MatchFormula resource.
 */
export const apiMatchFormulasNameGet = <ThrowOnError extends boolean = false>(options: Options<ApiMatchFormulasNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiMatchFormulasNameGetResponses, ApiMatchFormulasNameGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_formulas/{name}',
        ...options
    });
};

/**
 * Retrieves the collection of MatchRule resources.
 * Retrieves the collection of MatchRule resources.
 */
export const apiMatchRulesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiMatchRulesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiMatchRulesGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_rules',
        ...options
    });
};

/**
 * Retrieves a MatchRule resource.
 * Retrieves one MatchRule resource.
 */
export const apiMatchRulesNameGet = <ThrowOnError extends boolean = false>(options: Options<ApiMatchRulesNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiMatchRulesNameGetResponses, ApiMatchRulesNameGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_rules/{name}',
        ...options
    });
};

/**
 * Retrieves the collection of MatchStrategy resources.
 * Retrieves the collection of MatchStrategy resources.
 */
export const apiMatchStrategiesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiMatchStrategiesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiMatchStrategiesGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_strategies',
        ...options
    });
};

/**
 * Creates a MatchStrategy resource.
 * Creates a MatchStrategy resource.
 */
export const apiMatchStrategiesPost = <ThrowOnError extends boolean = false>(options: Options<ApiMatchStrategiesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiMatchStrategiesPostResponses, ApiMatchStrategiesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_strategies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes the MatchStrategy resource.
 * Removes the MatchStrategy resource.
 */
export const apiMatchStrategiesIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiMatchStrategiesIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiMatchStrategiesIdDeleteResponses, ApiMatchStrategiesIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_strategies/{id}',
        ...options
    });
};

/**
 * Retrieves a MatchStrategy resource.
 * Retrieves one MatchStrategy resource.
 */
export const apiMatchStrategiesIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiMatchStrategiesIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiMatchStrategiesIdGetResponses, ApiMatchStrategiesIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_strategies/{id}',
        ...options
    });
};

/**
 * Updates the MatchStrategy resource.
 * Updates the MatchStrategy resource.
 */
export const apiMatchStrategiesIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiMatchStrategiesIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiMatchStrategiesIdPatchResponses, ApiMatchStrategiesIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/match_strategies/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves a Organization resource.
 * Retrieves one Organization resource.
 */
export const apiUsersIdorganizationGet = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdorganizationGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiUsersIdorganizationGetResponses, ApiUsersIdorganizationGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}/organization',
        ...options
    });
};

/**
 * Updates the Organization resource.
 * Updates the Organization resource.
 */
export const apiUsersIdorganizationPatch = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdorganizationPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiUsersIdorganizationPatchResponses, ApiUsersIdorganizationPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}/organization',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves a Person resource.
 * Retrieves one Person resource.
 */
export const apiUsersIdpersonGet = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdpersonGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiUsersIdpersonGetResponses, ApiUsersIdpersonGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}/person',
        ...options
    });
};

/**
 * Updates the Person resource.
 * Updates the Person resource.
 */
export const apiUsersIdpersonPatch = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdpersonPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiUsersIdpersonPatchResponses, ApiUsersIdpersonPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}/person',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of Project resources.
 * Retrieves the collection of Project resources.
 */
export const apiProjectsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/projects',
        ...options
    });
};

/**
 * Creates a Project resource.
 * Creates a Project resource.
 */
export const apiProjectsPost = <ThrowOnError extends boolean = false>(options: Options<ApiProjectsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiProjectsPostResponses, ApiProjectsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves a Project resource.
 * Retrieves one Project resource.
 */
export const apiProjectsIdOrSlugGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectsIdOrSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectsIdOrSlugGetResponses, ApiProjectsIdOrSlugGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/projects/{idOrSlug}',
        ...options
    });
};

/**
 * Removes the Project resource.
 * Removes the Project resource.
 */
export const apiProjectsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiProjectsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiProjectsIdDeleteResponses, ApiProjectsIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/projects/{id}',
        ...options
    });
};

/**
 * Updates the Project resource.
 * Updates the Project resource.
 */
export const apiProjectsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectsIdPatchResponses, ApiProjectsIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/projects/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of ProjectBudgetItem resources.
 * Retrieves the collection of ProjectBudgetItem resources.
 */
export const apiProjectBudgetItemsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectBudgetItemsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectBudgetItemsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_budget_items',
        ...options
    });
};

/**
 * Creates a ProjectBudgetItem resource.
 * Creates a ProjectBudgetItem resource.
 */
export const apiProjectBudgetItemsPost = <ThrowOnError extends boolean = false>(options: Options<ApiProjectBudgetItemsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiProjectBudgetItemsPostResponses, ApiProjectBudgetItemsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_budget_items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes the ProjectBudgetItem resource.
 * Removes the ProjectBudgetItem resource.
 */
export const apiProjectBudgetItemsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiProjectBudgetItemsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiProjectBudgetItemsIdDeleteResponses, ApiProjectBudgetItemsIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_budget_items/{id}',
        ...options
    });
};

/**
 * Retrieves a ProjectBudgetItem resource.
 * Retrieves one ProjectBudgetItem resource.
 */
export const apiProjectBudgetItemsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectBudgetItemsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectBudgetItemsIdGetResponses, ApiProjectBudgetItemsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_budget_items/{id}',
        ...options
    });
};

/**
 * Updates the ProjectBudgetItem resource.
 * Updates the ProjectBudgetItem resource.
 */
export const apiProjectBudgetItemsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectBudgetItemsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectBudgetItemsIdPatchResponses, ApiProjectBudgetItemsIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_budget_items/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of ProjectReward resources.
 * Retrieves the collection of ProjectReward resources.
 */
export const apiProjectRewardsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectRewardsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectRewardsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_rewards',
        ...options
    });
};

/**
 * Creates a ProjectReward resource.
 * Creates a ProjectReward resource.
 */
export const apiProjectRewardsPost = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiProjectRewardsPostResponses, ApiProjectRewardsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_rewards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes the ProjectReward resource.
 * Removes the ProjectReward resource.
 */
export const apiProjectRewardsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiProjectRewardsIdDeleteResponses, ApiProjectRewardsIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_rewards/{id}',
        ...options
    });
};

/**
 * Retrieves a ProjectReward resource.
 * Retrieves one ProjectReward resource.
 */
export const apiProjectRewardsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectRewardsIdGetResponses, ApiProjectRewardsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_rewards/{id}',
        ...options
    });
};

/**
 * Updates the ProjectReward resource.
 * Updates the ProjectReward resource.
 */
export const apiProjectRewardsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectRewardsIdPatchResponses, ApiProjectRewardsIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_rewards/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of ProjectRewardClaim resources.
 * Retrieves the collection of ProjectRewardClaim resources.
 */
export const apiProjectRewardClaimsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectRewardClaimsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectRewardClaimsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_reward_claims',
        ...options
    });
};

/**
 * Creates a ProjectRewardClaim resource.
 * Creates a ProjectRewardClaim resource.
 */
export const apiProjectRewardClaimsPost = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardClaimsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiProjectRewardClaimsPostResponses, ApiProjectRewardClaimsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_reward_claims',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes the ProjectRewardClaim resource.
 * Removes the ProjectRewardClaim resource.
 */
export const apiProjectRewardClaimsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardClaimsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiProjectRewardClaimsIdDeleteResponses, ApiProjectRewardClaimsIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_reward_claims/{id}',
        ...options
    });
};

/**
 * Retrieves a ProjectRewardClaim resource.
 * Retrieves one ProjectRewardClaim resource.
 */
export const apiProjectRewardClaimsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectRewardClaimsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectRewardClaimsIdGetResponses, ApiProjectRewardClaimsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_reward_claims/{id}',
        ...options
    });
};

/**
 * Retrieves the collection of ProjectSupport resources.
 * Retrieves the collection of ProjectSupport resources.
 */
export const apiProjectSupportsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectSupportsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectSupportsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_supports',
        ...options
    });
};

/**
 * Get money total
 * Returns a single TotalizedMoney object
 */
export const apiProjectSupportsmoneyTotalGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectSupportsmoneyTotalGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectSupportsmoneyTotalGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_supports/money_total',
        ...options
    });
};

/**
 * Retrieves a ProjectSupport resource.
 * Retrieves one ProjectSupport resource.
 */
export const apiProjectSupportsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectSupportsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectSupportsIdGetResponses, ApiProjectSupportsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_supports/{id}',
        ...options
    });
};

/**
 * Updates the ProjectSupport resource.
 * Updates the ProjectSupport resource.
 */
export const apiProjectSupportsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectSupportsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectSupportsIdPatchResponses, ApiProjectSupportsIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_supports/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of ProjectUpdate resources.
 * Retrieves the collection of ProjectUpdate resources.
 */
export const apiProjectUpdatesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiProjectUpdatesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiProjectUpdatesGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_updates',
        ...options
    });
};

/**
 * Creates a ProjectUpdate resource.
 * Creates a ProjectUpdate resource.
 */
export const apiProjectUpdatesPost = <ThrowOnError extends boolean = false>(options: Options<ApiProjectUpdatesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiProjectUpdatesPostResponses, ApiProjectUpdatesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_updates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes the ProjectUpdate resource.
 * Removes the ProjectUpdate resource.
 */
export const apiProjectUpdatesIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiProjectUpdatesIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiProjectUpdatesIdDeleteResponses, ApiProjectUpdatesIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_updates/{id}',
        ...options
    });
};

/**
 * Retrieves a ProjectUpdate resource.
 * Retrieves one ProjectUpdate resource.
 */
export const apiProjectUpdatesIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiProjectUpdatesIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiProjectUpdatesIdGetResponses, ApiProjectUpdatesIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_updates/{id}',
        ...options
    });
};

/**
 * Updates the ProjectUpdate resource.
 * Updates the ProjectUpdate resource.
 */
export const apiProjectUpdatesIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiProjectUpdatesIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiProjectUpdatesIdPatchResponses, ApiProjectUpdatesIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/project_updates/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of Tipjar resources.
 * Retrieves the collection of Tipjar resources.
 */
export const apiTipjarsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiTipjarsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiTipjarsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/tipjars',
        ...options
    });
};

/**
 * Creates a Tipjar resource.
 * Creates a Tipjar resource.
 */
export const apiTipjarsPost = <ThrowOnError extends boolean = false>(options: Options<ApiTipjarsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiTipjarsPostResponses, ApiTipjarsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/tipjars',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes the Tipjar resource.
 * Removes the Tipjar resource.
 */
export const apiTipjarsIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiTipjarsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiTipjarsIdDeleteResponses, ApiTipjarsIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/tipjars/{id}',
        ...options
    });
};

/**
 * Retrieves a Tipjar resource.
 * Retrieves one Tipjar resource.
 */
export const apiTipjarsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiTipjarsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiTipjarsIdGetResponses, ApiTipjarsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/tipjars/{id}',
        ...options
    });
};

/**
 * Updates the Tipjar resource.
 * Updates the Tipjar resource.
 */
export const apiTipjarsIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiTipjarsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiTipjarsIdPatchResponses, ApiTipjarsIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/tipjars/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the collection of User resources.
 * Retrieves the collection of User resources.
 */
export const apiUsersGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ApiUsersGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiUsersGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users',
        ...options
    });
};

/**
 * Creates a User resource.
 * Creates a User resource.
 */
export const apiUsersPost = <ThrowOnError extends boolean = false>(options: Options<ApiUsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiUsersPostResponses, ApiUsersPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes the User resource.
 * Removes the User resource.
 */
export const apiUsersIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiUsersIdDeleteResponses, ApiUsersIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}',
        ...options
    });
};

/**
 * Retrieves a User resource.
 * Retrieves one User resource.
 */
export const apiUsersIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiUsersIdGetResponses, ApiUsersIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}',
        ...options
    });
};

/**
 * Updates the User resource.
 * Updates the User resource.
 */
export const apiUsersIdPatch = <ThrowOnError extends boolean = false>(options: Options<ApiUsersIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiUsersIdPatchResponses, ApiUsersIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Creates a UserToken resource.
 * Creates a new UserToken resource.
 */
export const apiUserTokensPost = <ThrowOnError extends boolean = false>(options: Options<ApiUserTokensPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiUserTokensPostResponses, ApiUserTokensPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/user_tokens',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes the UserToken resource.
 * Removes the UserToken resource.
 */
export const apiUserTokensIdDelete = <ThrowOnError extends boolean = false>(options: Options<ApiUserTokensIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiUserTokensIdDeleteResponses, ApiUserTokensIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/user_tokens/{id}',
        ...options
    });
};

/**
 * Retrieves a UserToken resource.
 * Retrieves one UserToken resource.
 */
export const apiUserTokensIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiUserTokensIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiUserTokensIdGetResponses, ApiUserTokensIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/user_tokens/{id}',
        ...options
    });
};

/**
 * Retrieves the collection of Version resources.
 * Retrieves the collection of Version resources.
 */
export const apiVersionsGetCollection = <ThrowOnError extends boolean = false>(options: Options<ApiVersionsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiVersionsGetCollectionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/versions',
        ...options
    });
};

/**
 * Retrieves a Version resource.
 * Retrieves one Version resource.
 */
export const apiVersionsIdGet = <ThrowOnError extends boolean = false>(options: Options<ApiVersionsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiVersionsIdGetResponses, ApiVersionsIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v4/versions/{id}',
        ...options
    });
};