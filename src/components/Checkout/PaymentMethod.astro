---
import type { ApiGatewaysNameGetResponse } from "../../openapi/client/index";
import CreditCardIcon from "../../svgs/CreditCardIcon.astro";
import PaypalIcon from "../../svgs/PaypalIcon.astro";
import StripeIcon from "../../svgs/StripeIcon.astro";
import { formatCurrency } from "../../utils/currencies";
const { t } = Astro.locals;
const {
    paymentGateways,
    hasError,
}: { paymentGateways?: ApiGatewaysNameGetResponse[]; hasError?: boolean } = Astro.props;

const { accountingBalance } = Astro.props;
---

<section>
    <div class="flex flex-col gap-6 sm:w-full sm:max-w-md">
        <p class="text-2xl font-bold">
            {hasError ? t("payment.page-error.selectMethod") : t("payment.page.selectMethod")}
        </p>

        <form
            id="payment"
            method="POST"
            class="flex flex-col gap-4"
            data-balance={accountingBalance.amount}
        >
            <div class="grid grid-cols-2 gap-4">
                {
                    (paymentGateways ?? []).map((gateway) => (
                        <label
                            class="flex cursor-pointer items-center justify-between gap-4 rounded-2xl border border-[#F3F3EF] px-6 py-4 shadow-sm transition-all hover:shadow-md"
                            data-gateway={gateway.name}
                        >
                            <div class="flex items-center gap-2">
                                <input
                                    type="radio"
                                    name="paymentMethod"
                                    value={gateway.name}
                                    disabled={gateway.name === "wallet"}
                                    checked={
                                        gateway.name !== "wallet" &&
                                        paymentGateways?.[0]?.name === gateway.name
                                    }
                                    class="after:bg-primary relative h-6 w-6 appearance-none rounded-full border border-[#462949] after:absolute after:top-1/2 after:left-1/2 after:hidden after:h-2 after:w-2 after:-translate-x-1/2 after:-translate-y-1/2 after:transform after:rounded-full after:content-[''] checked:border-[#462949] checked:bg-[#462949] checked:after:block"
                                />
                                <div class="flex flex-col leading-tight">
                                    <span class="font-semibold capitalize">{gateway.name}</span>
                                    {gateway.name === "wallet" && (
                                        <span class="text-sm font-normal">
                                            {t("payment.wallet.balanceLabel")}
                                            {formatCurrency(
                                                accountingBalance.amount,
                                                accountingBalance.currency,
                                                { showSymbol: true },
                                            )}
                                        </span>
                                    )}
                                </div>
                            </div>
                            <div>
                                {gateway.name === "paypal" ? (
                                    <PaypalIcon />
                                ) : gateway.name === "stripe" ? (
                                    <StripeIcon />
                                ) : gateway.name === "wallet" ? (
                                    <CreditCardIcon />
                                ) : null}
                            </div>
                        </label>
                    ))
                }
            </div>
            <input type="hidden" name="cartData" id="cart-data-input" />
        </form>
        <div id="payment-error-content" class="mt-4 text-center text-red-500"></div>
    </div>
</section>
<script>
    import { actions, isInputError } from "astro:actions";

    const form = document.getElementById("payment");
    const errorContent = document.getElementById("payment-error-content");
    const cartDataInput = document.getElementById("cart-data-input");

    if (form instanceof HTMLFormElement) {
        form.addEventListener("submit", async (event) => {
            event.preventDefault();

            const formData = new FormData(form);
            const selectedMethod = formData.get("paymentMethod");

            if (selectedMethod === "wallet") {
                window.location.href = "/payment/wallet";
                return;
            }

            const { error, data } = await actions.payment(formData);

            if (!error) {
                const checkoutLink = data?.checkout?.links?.find(
                    (link) => link.type === "payment",
                )?.href;

                console.log(data);

                if (checkoutLink) {
                    window.location.href = checkoutLink;
                } else {
                    console.error("No payment link found in the response");
                }
            }

            if (error && errorContent instanceof HTMLElement) {
                errorContent.innerHTML = "";

                if (isInputError(error)) {
                    const ul = document.createElement("ul");
                    error.issues.forEach((err) => {
                        const li = document.createElement("li");
                        li.innerText = err.message;
                        ul.appendChild(li);
                    });

                    errorContent.appendChild(ul);
                    return;
                }
                errorContent.innerText = error.message;
            }
        });
    }

    document.addEventListener("DOMContentLoaded", () => {
        const labels = document.querySelectorAll("label[data-gateway]");
        const inputs = document.querySelectorAll("input[name='paymentMethod']");
        const walletInput = document.querySelector("input[value='wallet']");
        const cartData = localStorage.getItem("cart");

        if (cartData && cartDataInput) {
            (cartDataInput as HTMLInputElement).value = cartData;
        }

        if (cartData && walletInput) {
            try {
                const cart = JSON.parse(cartData);
                const total = cart.items.reduce(
                    (sum: number, item: { amount: number; quantity: number }) =>
                        sum + item.amount * item.quantity,
                    0,
                );

                const balanceAttr = form?.dataset.balance;
                const balance = balanceAttr ? parseFloat(balanceAttr) : 0;

                const shouldDisable = balance < total;
                (walletInput as HTMLInputElement).disabled = shouldDisable;

                const walletLabel = walletInput.closest("label");
                if (walletLabel) {
                    walletLabel.classList.toggle("opacity-50", shouldDisable);
                    walletLabel.classList.toggle("cursor-not-allowed", shouldDisable);
                }
            } catch (e) {
                console.log("Error parsing cart data:", e);
            }
        }

        inputs.forEach((input) => {
            input.addEventListener("change", () => {
                labels.forEach((label) => {
                    label.classList.remove("bg-teal-300", "text-[#2f1e2e]", "border-teal-400");
                    label.classList.add("border-[#F3F3EF]");
                });

                const selectedLabel = input.closest("label");
                if (selectedLabel) {
                    selectedLabel.classList.remove("border-[#F3F3EF]");
                    selectedLabel.classList.add("bg-teal-300", "text-[#2f1e2e]", "border-teal-400");
                }
            });
        });
    });
</script>
