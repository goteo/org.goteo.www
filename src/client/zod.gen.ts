// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zAccounting = z.object({
    id: z.number().int().optional(),
    currency: z.string().optional(),
    balance: z.object({
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    owner: z.string().readonly().optional()
});

export const zAccountingJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.number().int().optional(),
    currency: z.string().optional(),
    balance: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    owner: z.string().readonly().optional()
});

export const zAccountingBalancePoint = z.object({
    start: z.string().datetime().optional(),
    end: z.string().datetime().optional(),
    balance: z.object({
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    length: z.number().int().optional()
});

export const zAccountingBalancePointJsonld = z.object({
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    start: z.string().datetime().optional(),
    end: z.string().datetime().optional(),
    balance: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    length: z.number().int().optional()
});

export const zAccountingTransaction = z.object({
    id: z.number().int().readonly().optional(),
    money: z.object({
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    origin: z.string().optional(),
    target: z.string().optional()
});

export const zAccountingTransactionJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.number().int().readonly().optional(),
    money: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    origin: z.string().optional(),
    target: z.string().optional()
});

export const zBudget = z.object({
    minimum: z.object({
        money: z.object({
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        task: z.object({
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        material: z.object({
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        infra: z.object({
            amount: z.number().int(),
            currency: z.string()
        }).optional()
    }).optional(),
    optimum: z.object({
        money: z.object({
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        task: z.object({
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        material: z.object({
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        infra: z.object({
            amount: z.number().int(),
            currency: z.string()
        }).optional()
    }).optional()
});

export const zBudgetJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    minimum: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        money: z.object({
            '@context': z.union([
                z.string(),
                z.object({
                    '@vocab': z.string(),
                    hydra: z.enum([
                        'http://www.w3.org/ns/hydra/core#'
                    ])
                })
            ]).optional(),
            '@id': z.string().readonly().optional(),
            '@type': z.string().readonly().optional(),
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        task: z.object({
            '@context': z.union([
                z.string(),
                z.object({
                    '@vocab': z.string(),
                    hydra: z.enum([
                        'http://www.w3.org/ns/hydra/core#'
                    ])
                })
            ]).optional(),
            '@id': z.string().readonly().optional(),
            '@type': z.string().readonly().optional(),
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        material: z.object({
            '@context': z.union([
                z.string(),
                z.object({
                    '@vocab': z.string(),
                    hydra: z.enum([
                        'http://www.w3.org/ns/hydra/core#'
                    ])
                })
            ]).optional(),
            '@id': z.string().readonly().optional(),
            '@type': z.string().readonly().optional(),
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        infra: z.object({
            '@context': z.union([
                z.string(),
                z.object({
                    '@vocab': z.string(),
                    hydra: z.enum([
                        'http://www.w3.org/ns/hydra/core#'
                    ])
                })
            ]).optional(),
            '@id': z.string().readonly().optional(),
            '@type': z.string().readonly().optional(),
            amount: z.number().int(),
            currency: z.string()
        }).optional()
    }).optional(),
    optimum: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        money: z.object({
            '@context': z.union([
                z.string(),
                z.object({
                    '@vocab': z.string(),
                    hydra: z.enum([
                        'http://www.w3.org/ns/hydra/core#'
                    ])
                })
            ]).optional(),
            '@id': z.string().readonly().optional(),
            '@type': z.string().readonly().optional(),
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        task: z.object({
            '@context': z.union([
                z.string(),
                z.object({
                    '@vocab': z.string(),
                    hydra: z.enum([
                        'http://www.w3.org/ns/hydra/core#'
                    ])
                })
            ]).optional(),
            '@id': z.string().readonly().optional(),
            '@type': z.string().readonly().optional(),
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        material: z.object({
            '@context': z.union([
                z.string(),
                z.object({
                    '@vocab': z.string(),
                    hydra: z.enum([
                        'http://www.w3.org/ns/hydra/core#'
                    ])
                })
            ]).optional(),
            '@id': z.string().readonly().optional(),
            '@type': z.string().readonly().optional(),
            amount: z.number().int(),
            currency: z.string()
        }).optional(),
        infra: z.object({
            '@context': z.union([
                z.string(),
                z.object({
                    '@vocab': z.string(),
                    hydra: z.enum([
                        'http://www.w3.org/ns/hydra/core#'
                    ])
                })
            ]).optional(),
            '@id': z.string().readonly().optional(),
            '@type': z.string().readonly().optional(),
            amount: z.number().int(),
            currency: z.string()
        }).optional()
    }).optional()
});

export const zBudgetSummary = z.object({
    money: z.object({
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    task: z.object({
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    material: z.object({
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    infra: z.object({
        amount: z.number().int(),
        currency: z.string()
    }).optional()
});

export const zBudgetSummaryJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    money: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    task: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    material: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        amount: z.number().int(),
        currency: z.string()
    }).optional(),
    infra: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        amount: z.number().int(),
        currency: z.string()
    }).optional()
});

export const zGateway = z.object({
    name: z.string().optional(),
    supports: z.array(z.enum([
        'single',
        'recurring'
    ])).optional()
});

export const zGatewayJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    name: z.string().optional(),
    supports: z.array(z.enum([
        'single',
        'recurring'
    ])).optional()
});

export const zGatewayCharge = z.object({
    id: z.union([
        z.number().int().readonly(),
        z.null()
    ]).readonly().optional(),
    type: z.enum([
        'single',
        'recurring'
    ]),
    title: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    target: z.string(),
    money: z.object({
        amount: z.number().int(),
        currency: z.string()
    })
});

export const zGatewayChargeJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.union([
        z.number().int().readonly(),
        z.null()
    ]).readonly().optional(),
    type: z.enum([
        'single',
        'recurring'
    ]),
    title: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    target: z.string(),
    money: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        amount: z.number().int(),
        currency: z.string()
    })
});

export const zGatewayCheckout = z.object({
    id: z.number().int().readonly().optional(),
    gateway: z.string(),
    origin: z.string(),
    charges: z.array(zGatewayCharge).min(1),
    returnUrl: z.string().url(),
    status: z.enum([
        'pending',
        'charged'
    ]).optional(),
    links: z.array(z.object({
        href: z.string().optional(),
        rel: z.string().optional(),
        method: z.string().optional(),
        type: z.enum([
            'debug',
            'payment'
        ]).optional()
    })).readonly().optional(),
    trackings: z.array(z.object({
        title: z.string(),
        value: z.string()
    })).readonly().optional()
});

export const zGatewayCheckoutJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.number().int().readonly().optional(),
    gateway: z.string(),
    origin: z.string(),
    charges: z.array(zGatewayChargeJsonld).min(1),
    returnUrl: z.string().url(),
    status: z.enum([
        'pending',
        'charged'
    ]).optional(),
    links: z.array(z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        href: z.string().optional(),
        rel: z.string().optional(),
        method: z.string().optional(),
        type: z.enum([
            'debug',
            'payment'
        ]).optional()
    })).readonly().optional(),
    trackings: z.array(z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        title: z.string(),
        value: z.string()
    })).readonly().optional()
});

export const zLink = z.object({
    href: z.string().optional(),
    rel: z.string().optional(),
    method: z.string().optional(),
    type: z.enum([
        'debug',
        'payment'
    ]).optional()
});

export const zLinkJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    href: z.string().optional(),
    rel: z.string().optional(),
    method: z.string().optional(),
    type: z.enum([
        'debug',
        'payment'
    ]).optional()
});

export const zMoney = z.object({
    amount: z.number().int(),
    currency: z.string()
});

export const zMoneyJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    amount: z.number().int(),
    currency: z.string()
});

export const zProject = z.object({
    id: z.number().int().readonly().optional(),
    accounting: z.string().readonly().optional(),
    owner: z.string().readonly().optional(),
    locales: z.array(z.string()).readonly().optional(),
    title: z.string(),
    subtitle: z.string(),
    territory: z.object({
        country: z.string(),
        subLvl1: z.string().optional(),
        subLvl2: z.string().optional()
    }),
    description: z.string(),
    video: z.string().url().optional(),
    videoEmbed: z.object({
        src: z.union([
            z.string(),
            z.null()
        ]).optional(),
        thumbnail: z.union([
            z.string(),
            z.null()
        ]).optional()
    }).optional(),
    status: z.enum([
        'in_editing',
        'in_review',
        'rejected',
        'in_campaign',
        'unfunded',
        'in_funding',
        'fulfilled'
    ]).optional(),
    rewards: z.array(z.string()).readonly().optional(),
    budget: zBudget.optional(),
    budgetItems: z.array(z.string()).readonly().optional()
});

export const zProjectJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.number().int().readonly().optional(),
    accounting: z.string().readonly().optional(),
    owner: z.string().readonly().optional(),
    locales: z.array(z.string()).readonly().optional(),
    title: z.string(),
    subtitle: z.string(),
    territory: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        country: z.string(),
        subLvl1: z.string().optional(),
        subLvl2: z.string().optional()
    }),
    description: z.string(),
    video: z.string().url().optional(),
    videoEmbed: z.object({
        '@context': z.union([
            z.string(),
            z.object({
                '@vocab': z.string(),
                hydra: z.enum([
                    'http://www.w3.org/ns/hydra/core#'
                ])
            })
        ]).optional(),
        '@id': z.string().readonly().optional(),
        '@type': z.string().readonly().optional(),
        src: z.union([
            z.string(),
            z.null()
        ]).optional(),
        thumbnail: z.union([
            z.string(),
            z.null()
        ]).optional()
    }).optional(),
    status: z.enum([
        'in_editing',
        'in_review',
        'rejected',
        'in_campaign',
        'unfunded',
        'in_funding',
        'fulfilled'
    ]).optional(),
    rewards: z.array(z.string()).readonly().optional(),
    budget: zBudgetJsonld.optional(),
    budgetItems: z.array(z.string()).readonly().optional()
});

export const zProjectBudgetItem = z.object({
    id: z.number().int().readonly().optional(),
    project: z.string().optional(),
    type: z.enum([
        'infrastructure',
        'material',
        'task'
    ]),
    locales: z.array(z.string()).readonly().optional(),
    title: z.string(),
    description: z.string(),
    minimum: zMoney.optional(),
    optimum: zMoney.optional()
});

export const zProjectBudgetItemJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.number().int().readonly().optional(),
    project: z.string().optional(),
    type: z.enum([
        'infrastructure',
        'material',
        'task'
    ]),
    locales: z.array(z.string()).readonly().optional(),
    title: z.string(),
    description: z.string(),
    minimum: zMoneyJsonld.optional(),
    optimum: zMoneyJsonld.optional()
});

export const zProjectReward = z.object({
    id: z.number().int().readonly().optional(),
    project: z.string(),
    title: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]),
    money: zMoney,
    hasUnits: z.boolean(),
    unitsTotal: z.number().int().optional(),
    unitsAvailable: z.number().int().readonly().optional()
});

export const zProjectRewardJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.number().int().readonly().optional(),
    project: z.string(),
    title: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]),
    money: zMoneyJsonld,
    hasUnits: z.boolean(),
    unitsTotal: z.number().int().optional(),
    unitsAvailable: z.number().int().readonly().optional()
});

export const zProjectRewardClaim = z.object({
    id: z.number().int().readonly().optional(),
    reward: z.string(),
    owner: z.string().readonly().optional()
});

export const zProjectRewardClaimJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.number().int().readonly().optional(),
    reward: z.string(),
    owner: z.string().readonly().optional()
});

export const zProjectTerritoryApiResource = z.object({
    country: z.string(),
    subLvl1: z.string().optional(),
    subLvl2: z.string().optional()
});

export const zProjectTerritoryApiResourceJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    country: z.string(),
    subLvl1: z.string().optional(),
    subLvl2: z.string().optional()
});

export const zProjectVideo = z.object({
    src: z.union([
        z.string(),
        z.null()
    ]).optional(),
    thumbnail: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zProjectVideoJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    src: z.union([
        z.string(),
        z.null()
    ]).optional(),
    thumbnail: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zTipjar = z.object({
    id: z.number().int().readonly().optional(),
    name: z.string().optional(),
    accounting: z.union([
        zAccounting,
        z.null()
    ]).optional()
});

export const zTipjarJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.number().int().readonly().optional(),
    name: z.string().optional(),
    accounting: z.union([
        zAccountingJsonld,
        z.null()
    ]).optional()
});

export const zTracking = z.object({
    title: z.string(),
    value: z.string()
});

export const zTrackingJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    title: z.string(),
    value: z.string()
});

export const zUser = z.object({
    id: z.number().int().readonly().optional(),
    email: z.string().email(),
    emailConfirmed: z.boolean().readonly().optional(),
    username: z.string().min(4).max(30).regex(/^([a-z0-9_]+)$/),
    name: z.string().optional(),
    roles: z.array(z.string()).optional(),
    accounting: z.string().readonly().optional(),
    projects: z.array(z.string()).readonly().optional()
});

export const zUserUserSignupDto = z.object({
    email: z.string().email(),
    password: z.string().min(8),
    username: z.string().min(4).max(30).regex(/^([a-z0-9_]+)$/),
    name: z.string().optional()
});

export const zUserUserSignupDtoJsonld = z.object({
    email: z.string().email(),
    password: z.string().min(8),
    username: z.string().min(4).max(30).regex(/^([a-z0-9_]+)$/),
    name: z.string().optional()
});

export const zUserJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.number().int().readonly().optional(),
    email: z.string().email(),
    emailConfirmed: z.boolean().readonly().optional(),
    username: z.string().min(4).max(30).regex(/^([a-z0-9_]+)$/),
    name: z.string().optional(),
    roles: z.array(z.string()).optional(),
    accounting: z.string().readonly().optional(),
    projects: z.array(z.string()).readonly().optional()
});

export const zUserPersonal = z.object({
    user: zUser.optional(),
    identityDocument: z.union([
        z.string(),
        z.null()
    ]).optional(),
    postalCode: z.union([
        z.string(),
        z.null()
    ]).optional(),
    indetityDocumentType: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zUserPersonalJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    user: zUserJsonld.optional(),
    identityDocument: z.union([
        z.string(),
        z.null()
    ]).optional(),
    postalCode: z.union([
        z.string(),
        z.null()
    ]).optional(),
    indetityDocumentType: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zUserToken = z.object({
    id: z.number().int().readonly().optional(),
    token: z.string().readonly().optional(),
    owner: z.string().readonly().optional()
});

export const zUserTokenUserTokenLoginDto = z.object({
    identifier: z.string(),
    password: z.string()
});

export const zUserTokenUserTokenLoginDtoJsonld = z.object({
    identifier: z.string(),
    password: z.string()
});

export const zUserTokenJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.number().int().readonly().optional(),
    token: z.string().readonly().optional(),
    owner: z.string().readonly().optional()
});

export const zVersion = z.object({
    id: z.union([
        z.number().int().readonly(),
        z.null()
    ]).readonly().optional(),
    version: z.union([
        z.number().int().readonly(),
        z.null()
    ]).readonly().optional(),
    action: z.union([
        z.string().readonly(),
        z.null()
    ]).readonly().optional(),
    resource: z.string().readonly().optional(),
    resourceId: z.number().int().readonly().optional(),
    resourceChanges: z.unknown().readonly().optional(),
    dateCreated: z.union([
        z.string().datetime().readonly(),
        z.null()
    ]).readonly().optional()
});

export const zVersionJsonld = z.object({
    '@context': z.union([
        z.string(),
        z.object({
            '@vocab': z.string(),
            hydra: z.enum([
                'http://www.w3.org/ns/hydra/core#'
            ])
        })
    ]).optional(),
    '@id': z.string().readonly().optional(),
    '@type': z.string().readonly().optional(),
    id: z.union([
        z.number().int().readonly(),
        z.null()
    ]).readonly().optional(),
    version: z.union([
        z.number().int().readonly(),
        z.null()
    ]).readonly().optional(),
    action: z.union([
        z.string().readonly(),
        z.null()
    ]).readonly().optional(),
    resource: z.string().readonly().optional(),
    resourceId: z.number().int().readonly().optional(),
    resourceChanges: z.unknown().readonly().optional(),
    dateCreated: z.union([
        z.string().datetime().readonly(),
        z.null()
    ]).readonly().optional()
});

export const zApiAccountingsGetCollectionResponse = z.array(zAccounting);

export const zApiAccountingsIdGetResponse = zAccounting;

export const zApiAccountingsIdPatchResponse = zAccounting;

export const zApiAccountingBalancePointsGetCollectionResponse = z.array(zAccountingBalancePoint);

export const zApiAccountingTransactionsGetCollectionResponse = z.array(zAccountingTransaction);

export const zApiAccountingTransactionsIdGetResponse = zAccountingTransaction;

export const zApiGatewaysGetCollectionResponse = z.array(zGateway);

export const zApiGatewaysNameGetResponse = zGateway;

export const zApiGatewayChargesIdGetResponse = zGatewayCharge;

export const zApiGatewayCheckoutsGetCollectionResponse = z.array(zGatewayCheckout);

export const zApiGatewayCheckoutsPostResponse = zGatewayCheckout;

export const zApiGatewayCheckoutsIdGetResponse = zGatewayCheckout;

export const zApiProjectsGetCollectionResponse = z.array(zProject);

export const zApiProjectsPostResponse = zProject;

export const zApiProjectsIdDeleteResponse = z.void();

export const zApiProjectsIdGetResponse = zProject;

export const zApiProjectsIdPatchResponse = zProject;

export const zApiProjectBudgetItemsGetCollectionResponse = z.array(zProjectBudgetItem);

export const zApiProjectBudgetItemsPostResponse = zProjectBudgetItem;

export const zApiProjectBudgetItemsIdDeleteResponse = z.void();

export const zApiProjectBudgetItemsIdGetResponse = zProjectBudgetItem;

export const zApiProjectBudgetItemsIdPatchResponse = zProjectBudgetItem;

export const zApiProjectRewardsGetCollectionResponse = z.array(zProjectReward);

export const zApiProjectRewardsPostResponse = zProjectReward;

export const zApiProjectRewardsIdDeleteResponse = z.void();

export const zApiProjectRewardsIdGetResponse = zProjectReward;

export const zApiProjectRewardsIdPatchResponse = zProjectReward;

export const zApiProjectRewardClaimsGetCollectionResponse = z.array(zProjectRewardClaim);

export const zApiProjectRewardClaimsPostResponse = zProjectRewardClaim;

export const zApiProjectRewardClaimsIdDeleteResponse = z.void();

export const zApiProjectRewardClaimsIdGetResponse = zProjectRewardClaim;

export const zApiProjectRewardClaimsIdPatchResponse = zProjectRewardClaim;

export const zApiTipjarsGetCollectionResponse = z.array(zTipjar);

export const zApiTipjarsPostResponse = zTipjar;

export const zApiTipjarsIdDeleteResponse = z.void();

export const zApiTipjarsIdGetResponse = zTipjar;

export const zApiTipjarsIdPatchResponse = zTipjar;

export const zApiUsersGetCollectionResponse = z.array(zUser);

export const zApiUsersPostResponse = zUser;

export const zApiUsersIdDeleteResponse = z.void();

export const zApiUsersIdGetResponse = zUser;

export const zApiUsersIdPatchResponse = zUser;

export const zApiUserPersonalsGetCollectionResponse = z.array(zUserPersonal);

export const zApiUserPersonalsPostResponse = zUserPersonal;

export const zApiUserPersonalsUserDeleteResponse = z.void();

export const zApiUserPersonalsUserGetResponse = zUserPersonal;

export const zApiUserPersonalsUserPatchResponse = zUserPersonal;

export const zApiUserTokensPostResponse = zUserToken;

export const zApiUserTokensIdDeleteResponse = z.void();

export const zApiUserTokensIdGetResponse = zUserToken;

export const zApiVersionsGetCollectionResponse = z.array(zVersion);

export const zApiVersionsIdGetResponse = zVersion;