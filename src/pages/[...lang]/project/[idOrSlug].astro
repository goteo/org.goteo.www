---
import SingleProject from "../../../components/project/SingleProject.svelte";
import Layout from "../../../layouts/Layout.astro";
import Navigation from "../../../components/Navigation/Navigation.svelte";
import { extractId } from "../../../utils/extractId";
const { idOrSlug } = Astro.params;

import {
    apiAccountingsIdGet,
    apiProjectsIdOrSlugGet,
    apiUsersIdGet,
} from "../../../openapi/client/index";
import type { Project } from "../../../openapi/client/types.gen";
import { apiAccountingBalancePointsGetCollection } from "../../../openapi/client/sdk.gen";
import { apiProjectSupportsGetCollection } from "../../../openapi/client/sdk.gen";

if (!idOrSlug) {
    throw new Error("Project ID or Project Slug is undefined.");
}

let lang = Astro.locals.lang;

const { data: project, error } = await apiProjectsIdOrSlugGet({
    path: { idOrSlug },
    headers: { "Accept-Language": lang },
});

console.log(new Date().toISOString(), "post_project");

const accountingId = extractId(project?.accounting);

if (!accountingId) {
    throw new Error("Accounting ID is undefined.");
}

console.log(new Date().toISOString(), "pre_accounting");

const { data: accounting } = await apiAccountingsIdGet({ path: { id: accountingId } });

console.log(new Date().toISOString(), "post_accounting");

if (error || typeof project === "undefined") {
    throw new Error("Project not found");
}

console.log(new Date().toISOString(), "pre_user");

const { data: owner } = await apiUsersIdGet({
    path: { id: extractId(project.owner) || "" },
});

console.log(new Date().toISOString(), "post_user");

const ownerName = owner?.displayName || "";

console.log(new Date().toISOString(), "pre_project_supports");

const { data: supports } = await apiProjectSupportsGetCollection({
    query: { project: String(project.id!) },
    headers: { Accept: "application/ld+json" },
});

console.log(new Date().toISOString(), "post_project_supports");

// @ts-ignore
const totalSupports = supports.totalItems;

const deadlineKey = project?.deadline as keyof Project["calendar"];

console.log(new Date().toISOString(), "pre_accounting_balance_points");

const balancePoints = await (async () => {
    const end = new Date(project?.calendar?.[deadlineKey]!);

    end.setDate(end.getDate() + 1);

    const { data: points } = await apiAccountingBalancePointsGetCollection({
        query: {
            accounting: project?.accounting ?? "",
            start: project?.calendar?.release ?? "",
            end: end.toISOString(),
            aggregate: true,
        },
    });

    return points;
})();

console.log(new Date().toISOString(), "post_accounting_balance_points");
---

<Layout title={project.title} description={project.description}>
    <Navigation />
    <!-- <div class="wrapper"><UiLanguages /></div> -->
    <SingleProject
        {lang}
        {project}
        {accounting}
        {ownerName}
        {totalSupports}
        {balancePoints}
        client:load
    />
</Layout>
