---
import SingleProject from "../../../components/project/SingleProject.svelte";
import Layout from "../../../layouts/Layout.astro";
import Navigation from "../../../components/Navigation/Navigation.svelte";
// import UiLanguages from "../../../components/UiLanguages.astro";
import { extractId } from "../../../utils/extractId";
const { id } = Astro.params;

import {
    apiAccountingsIdGet,
    apiProjectsIdGet,
    apiUsersIdGet,
    apiGatewayCheckoutsGetCollection,
} from "../../../openapi/client/index";
import type { Project } from "../../../openapi/client/types.gen";
import { apiAccountingBalancePointsGetCollection } from "../../../openapi/client/sdk.gen";

if (!id) {
    throw new Error("Project ID is undefined.");
}

const { data: project, error } = await apiProjectsIdGet({ path: { id } });
const accountingId = extractId(project?.accounting);

if (!accountingId) {
    throw new Error("Accounting ID is undefined.");
}
const { data: accounting } = await apiAccountingsIdGet({ path: { id: accountingId } });

if (error || typeof project === "undefined") {
    throw new Error("Project not found");
}

const { data: owner } = await apiUsersIdGet({
    path: { id: extractId(project.owner) || "" },
});

const ownerName = owner?.displayName || "";

const { data: donations } = await apiGatewayCheckoutsGetCollection({
    headers: {
        Accept: "application/ld+json",
        //TODO: fix get donations from API
        // Authorization: `Bearer ${Astro.cookies.get("access-token")}`,
    },
});

const deadlineKey = project?.deadline as keyof Project["calendar"];

const { data: balancePoints } = await apiAccountingBalancePointsGetCollection({
    query: {
        accounting: project?.accounting ?? "",
        start: project?.calendar?.release ?? "",
        end: project?.calendar?.[deadlineKey] ?? "",
    },
});
---

<Layout title={project.title} description={project.description}>
    <Navigation />
    <!-- <div class="wrapper"><UiLanguages /></div> -->
    <SingleProject {project} {accounting} {ownerName} {donations} {balancePoints} client:load />
</Layout>
