name: Cypress E2E Tests

on:
    push:

jobs:
    cypress-run:
        runs-on: ubuntu-latest
        environment: ${{ github.ref_name }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 9

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install

            - name: Install Wrangler
              run: pnpm add --global wrangler

            - name: Cache Cypress binary
              uses: actions/cache@v4
              id: cypress-cache
              with:
                  path: ~/.cache/Cypress
                  key: cypress-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
                  restore-keys: |
                      cypress-${{ runner.os }}-

            - name: Install Cypress binary
              if: steps.cypress-cache.outputs.cache-hit != 'true'
              run: pnpm exec cypress install

            - name: Verify Cypress installation
              run: pnpm exec cypress verify

            - name: Set API URL based on branch
              id: api-url
              run: |
                  if [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "master" ]]; then
                    echo "API_URL=https://api-staging.v4.goteo.org" >> $GITHUB_OUTPUT
                    echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.ref_name }}" == "develop" ]]; then
                    echo "API_URL=https://api-staging.v4.goteo.org" >> $GITHUB_OUTPUT
                    echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
                  else
                    echo "API_URL=https://api-staging.v4.goteo.org" >> $GITHUB_OUTPUT
                    echo "ENVIRONMENT=development" >> $GITHUB_OUTPUT
                  fi

            - name: Create test env file
              run: |
                  echo "PUBLIC_API_URL=${{ steps.api-url.outputs.API_URL }}" >> .env
                  echo "PUBLIC_LANGUAGE_DEFAULT=es" >> .env
                  echo "PUBLIC_CURRENCY_DEFAULT=EUR" >> .env
                  echo "PUBLIC_PLATONIQ_ACCOUNTING_ID=2957" >> .env
                  echo "NODE_ENV=test" >> .env
                  echo "NODE_TLS_REJECT_UNAUTHORIZED=0" >> .env
                  echo "SKIP_PAYMENT_GATEWAYS=true" >> .env
                  echo "PAYMENT_GATEWAYS_CONFIG={}" >> .env
                  echo "STRIPE_PUBLIC_KEY=pk_test_dummy" >> .env
                  echo "STRIPE_SECRET_KEY=sk_test_dummy" >> .env
                  echo "PAYPAL_CLIENT_ID=dummy" >> .env
                  echo "PAYPAL_CLIENT_SECRET=dummy" >> .env
                  echo "PAYMENT_GATEWAYS_ENABLED=false" >> .env
                  echo "Environment: ${{ steps.api-url.outputs.ENVIRONMENT }}"
                  echo "API URL: ${{ steps.api-url.outputs.API_URL }}"

            - name: Run Cypress tests
              uses: cypress-io/github-action@v6
              with:
                  build: pnpm build
                  start: pnpm preview:ci
                  wait-on: http://localhost:4321
                  wait-on-timeout: 120
                  browser: chrome
              env:
                  CI: true
                  NODE_ENV: test
                  NODE_TLS_REJECT_UNAUTHORIZED: 0
                  PUBLIC_LANGUAGE_DEFAULT: es
                  CYPRESS_CONFIG_FILE: cypress.github.js
                  PUBLIC_API_URL: ${{ steps.api-url.outputs.API_URL }}
                  CYPRESS_MOCK_AUTH: true
                  CYPRESS_ENVIRONMENT: ${{ steps.api-url.outputs.ENVIRONMENT }}

            - name: Prepare artifact directories if tests failed
              if: failure()
              run: |
                  mkdir -p cypress/screenshots
                  mkdir -p cypress/videos
                  echo "Screenshot files found:"
                  find cypress/screenshots -type f | wc -l
                  echo "Video files found:"
                  find cypress/videos -type f | wc -l

            - name: Upload screenshots if tests failed
              uses: actions/upload-artifact@v4
              if: failure() && hashFiles('cypress/screenshots/**/*') != ''
              with:
                  name: cypress-screenshots-${{ steps.api-url.outputs.ENVIRONMENT }}
                  path: cypress/screenshots
                  retention-days: 7

            - name: Upload videos if tests failed
              uses: actions/upload-artifact@v4
              if: failure() && hashFiles('cypress/videos/**/*') != ''
              with:
                  name: cypress-videos-${{ steps.api-url.outputs.ENVIRONMENT }}
                  path: cypress/videos
                  retention-days: 7
